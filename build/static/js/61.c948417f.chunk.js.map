{"version":3,"file":"static/js/61.c948417f.chunk.js","mappings":"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","sources":["components/NotificationMessage.js","hooks/useInterval.js","views/pages/otp/index.js","views/pages/login/Login.js"],"sourcesContent":["\n\nimport React, {useEffect} from 'react'\nimport {\n  CAlert,\n} from '@coreui/react'\n\nconst NotificationMessage = ({message, type}) => {\n\n\n  useEffect(() => {\n    window.scrollTo({\n      top: 0,\n      behavior: 'smooth',\n    })\n  }, [])\n\n\n  return (\n    <CAlert color={type} style={{textAlign: 'center', height: '10px', display: 'flex',alignItems: 'center', justifyContent: 'center'}}>{message} </CAlert>\n  )\n}\n\nexport default NotificationMessage","import { useEffect, useRef } from 'react'\n\nconst useInterval = (callback, delay) => {\n  const savedCallback = useRef(() => {})\n\n  // Remember the latest callback.\n  useEffect(() => {\n    savedCallback.current = callback\n  }, [callback])\n\n  // Set up the interval.\n  useEffect(() => {\n    if (delay) {\n      let id = setInterval(() => savedCallback.current(), delay)\n      return () => clearInterval(id)\n    }\n  }, [delay])\n}\n\nexport default useInterval\n","import React, { useRef, useState } from 'react'\nimport {  Modal } from 'react-bootstrap'\nimport classNames from 'classnames'\nimport './index.scss'\nimport OTPInput from \"react-otp-input\"\nimport {\n  CButton,\n} from '@coreui/react'\nimport useInterval from '../../../hooks/useInterval'\n\n\n\n\nconst OtpModal = ({\n  show,\n  onHide,\n  isError,\n  handleSubmit,\n  isLoading,\n  setOTP,\n  OTP\n}) => {\n\n  const [countDownTimer, setCountDownTimer] = useState(300);\n  const [timer, setTimer] = useState('5 min and 00 sec')\n\n\n  function handleChange(OTP) {\n    setOTP(OTP);\n  }\n\n  useInterval(() => {\n    if (show) \n      setCountDownTimer(countDownTimer === 0\n        ? 0\n        : countDownTimer - 1);\n    let min = Math.floor(countDownTimer / 60);\n    let secs = countDownTimer - min * 60;\n    setTimer(`${min} : ${secs < 10\n      ? '0' + secs\n      : secs}`);\n  }, 1000);\n\n  if ( countDownTimer === 0 && show ) {\n    onHide()\n  }\n\n  return (\n    <Modal\n      show={show}\n      onHide={onHide}\n      dialogClassName=\"otp-modal\"\n      className=\"general-otp-modal\"\n      aria-labelledby=\"contained-modal-title-vcenter\"\n    >\n      <Modal.Body\n        className=\"otp-modal-body\">\n        <form action=\"\" onSubmit={handleSubmit}>\n         \n          <span className=\"otp-title\">Verification code</span>\n          <span className=\"span\">\n            Enter the code that was sent to your phone number\n          </span>\n          <div className=\"otp-fake-field d-flex justify-content-between\">\n            <OTPInput\n              onChange={handleChange}\n              value={OTP}\n              inputStyle=\"otp-inputStyle\"\n              numInputs={6}\n              separator={<span></span>}\n              style={{width: '100%'}}\n              hasErrored\n            />\n          </div>\n          {isError ? <p className={classNames(' text-center text-danger', {'d-block':  true})}> Invalid otp provided</p> : <p></p>}\n          <div className=\"timer-container code-expire-ctn\">\n              <span\n                className=\"otp-text-with-link\"\n                style={{\n                  fontSize: '16px',\n                  color: '#838AA2',\n                  fontFamily: 'sofia-medium',\n                }}\n              >\n                Code will expire in\n                <span\n                  style={\n                    false\n                      ? { color: '#D04750' }\n                      : { color: '#1F65B3' }\n                  }\n                >\n                  {' ' + timer} Minutes\n                </span>\n              </span>\n          </div>\n           <CButton \n              disabled={isLoading || OTP.length < 6}\n              type=\"submit\"\n              style={{width: '100%', backgroundColor: '#015EC6', outline: 'none', padding: '15px 0px'}}>\n              Submit\n            </CButton>\n        </form>\n      </Modal.Body>\n    </Modal>\n  )\n}\n\nexport default OtpModal\n","import React, { useState, useEffect } from \"react\";\nimport {\n  CButton,\n  CCard,\n  CCardBody,\n  CCardGroup,\n  CCol,\n  CContainer,\n  CForm,\n  CFormInput,\n  CInputGroup,\n  CInputGroupText,\n  CRow,\n} from \"@coreui/react\";\nimport CIcon from \"@coreui/icons-react\";\nimport { cilLockLocked,  cilLockUnlocked } from \"@coreui/icons\";\nimport { useNavigate } from \"react-router-dom\";\nimport NotificationMessage from \"src/components/NotificationMessage\";\nimport OtpModal from \"../otp\";\nimport { useRequestNonceQuery } from \"src/api\";\nimport { JSEncrypt } from \"jsencrypt\";\nimport { useLoginMutation, useVerifyOtpMutation } from \"src/api\";\n\nconst Login = () => {\n  const navigate = useNavigate();\n  const [showPassword, setShowPassword] = useState(false);\n\n  const { data, isLoadingNonce, refetch } = useRequestNonceQuery(\"nonce\");\n  const [\n    loginMutation,\n    { data: loginData, isLoading, isError, error, isSuccess },\n  ] = useLoginMutation();\n  const [\n    verifyOtpMutation,\n    {\n      data: otpData,\n      isLoading: otpLoader,\n      isError: otpIsError,\n      isSuccess: otpSuccess,\n    },\n  ] = useVerifyOtpMutation();\n\n  const [user, setUser] = useState({\n    username: \"\",\n    password: \"\",\n  });\n\n  const [otpModal, setOtpModal] = useState(false);\n  const [OTP, setOTP] = useState(\"\");\n\n  const handleSubmit = (e) => {\n    e.preventDefault();\n\n    const encrypt = new JSEncrypt();\n    encrypt.setPublicKey(data?.data[0].nonce);\n\n    let username = encrypt.encrypt(user.username);\n    let password = encrypt.encrypt(user.password);\n\n    const encryptedPayload = {\n      req: `${username}::::${password}::::${data?.data[0].nonce}`,\n    };\n    loginMutation(encryptedPayload);\n  };\n\n  useEffect(() => {\n    if (isSuccess) {\n      setOtpModal(!otpModal);\n    }\n    if (isError) {\n      refetch();\n    }\n  }, [isSuccess, isError]);\n\n  useEffect(() => {\n    if (otpSuccess) {\n      setOtpModal(false);\n      navigate(\"/dashboard\");\n      sessionStorage.setItem(\"token\", otpData.data[0]?.token);\n    }\n  }, [otpSuccess]);\n\n  const handleSubmitOtp = (event) => {\n    event.preventDefault();\n    verifyOtpMutation({ otpId: loginData?.data[0]?.otpId, otp: OTP });\n  };\n\n  return (\n    <div className=\"min-vh-100 d-flex flex-row align-items-center login-container\">\n      <CContainer>\n        <CRow\n          className=\"justify-content-center\"\n          style={{ marginBottom: \"60px\" }}\n        >\n          <CCol md={5}>\n            {isError && (\n              <NotificationMessage\n                message={error.data?.data[0]?.uiMessage}\n                type=\"danger\"\n              />\n            )}\n            <CCardGroup>\n              <CCard className=\"p-4\">\n                <CCardBody>\n                  <CForm onSubmit={handleSubmit}>\n                    <h1 style={{ textAlign: \"center\" }}>Compliance System</h1>\n                    <p\n                      className=\"text-medium-emphasis\"\n                      style={{ textAlign: \"center\" }}\n                    >\n                      Sign In to your account\n                    </p>\n                    <CInputGroup className=\"mb-3\">\n                      <CFormInput\n                        placeholder=\"Username\"\n                        autoComplete=\"username\"\n                        onChange={(e) =>\n                          setUser({\n                            ...user,\n                            username: e.target.value,\n                          })\n                        }\n                        required\n                      />\n                    </CInputGroup>\n                    <CInputGroup className=\"mb-4\">\n                      <CFormInput\n                        type={showPassword ? \"text\" : \"password\"}\n                        placeholder=\"Password\"\n                        autoComplete=\"current-password\"\n                        onChange={(e) =>\n                          setUser({\n                            ...user,\n                            password: e.target.value,\n                          })\n                        }\n                        required\n                      />\n                      <CInputGroupText\n                        onClick={() => setShowPassword(!showPassword)}\n                        style={{ cursor: \"pointer\" }}\n                      >\n                        <CIcon\n                          icon={showPassword ? cilLockLocked : cilLockUnlocked}\n                        />\n                      </CInputGroupText>\n                    </CInputGroup>\n                    <div style={{ width: \"100%\" }}>\n                      <CButton\n                        disabled={isLoadingNonce || isLoading}\n                        type=\"submit\"\n                        style={{\n                          width: \"100%\",\n                          backgroundColor: \"#015EC6\",\n                          outline: \"none\",\n                        }}\n                      >\n                        Login\n                      </CButton>\n                    </div>\n                    <div\n                      style={{\n                        width: \"100%\",\n                        display: \"flex\",\n                        justifyContent: \"center\",\n                      }}\n                    >\n                      <span\n                        style={{ cursor: \"pointer\" }}\n                        // onClick={() => navigate(\"/recover-password\")}\n                        color=\"link\"\n                        className=\"forgot-password-link\"\n                      >\n                        \n                      </span>\n                    </div>\n                  </CForm>\n                </CCardBody>\n              </CCard>\n            </CCardGroup>\n          </CCol>\n        </CRow>\n        <OtpModal\n          show={otpModal}\n          onHide={() => setOtpModal(false)}\n          // otpId={loginData?.data[0]?.otpId}\n          handleSubmit={handleSubmitOtp}\n          isError={otpIsError}\n          isLoading={otpLoader}\n          OTP={OTP}\n          setOTP={setOTP}\n        />\n      </CContainer>\n    </div>\n  );\n};\n\nexport default Login;\n"],"names":["message","type","useEffect","window","scrollTo","top","behavior","color","style","textAlign","height","display","alignItems","justifyContent","callback","delay","savedCallback","useRef","current","id","setInterval","clearInterval","show","onHide","isError","handleSubmit","isLoading","setOTP","OTP","useState","countDownTimer","setCountDownTimer","timer","setTimer","useInterval","min","Math","floor","secs","Modal","dialogClassName","className","action","onSubmit","onChange","value","inputStyle","numInputs","separator","width","hasErrored","classNames","fontSize","fontFamily","disabled","length","backgroundColor","outline","padding","navigate","useNavigate","showPassword","setShowPassword","useRequestNonceQuery","data","isLoadingNonce","refetch","useLoginMutation","loginMutation","loginData","error","isSuccess","useVerifyOtpMutation","verifyOtpMutation","otpData","otpLoader","otpIsError","otpSuccess","username","password","user","setUser","otpModal","setOtpModal","sessionStorage","setItem","token","marginBottom","md","NotificationMessage","uiMessage","e","preventDefault","encrypt","JSEncrypt","setPublicKey","nonce","encryptedPayload","req","placeholder","autoComplete","target","required","onClick","cursor","icon","cilLockLocked","cilLockUnlocked","event","otpId","otp"],"sourceRoot":""}