{"version":3,"file":"static/js/61.b34e38b2.chunk.js","mappings":"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","sources":["components/NotificationMessage.js","hooks/useInterval.js","views/pages/otp/index.js","views/pages/login/Login.js"],"sourcesContent":["\n\nimport React, {useEffect} from 'react'\nimport {\n  CAlert,\n} from '@coreui/react'\n\nconst NotificationMessage = ({message, type}) => {\n\n\n  useEffect(() => {\n    window.scrollTo({\n      top: 0,\n      behavior: 'smooth',\n    })\n  }, [])\n\n\n  return (\n    <CAlert color={type} style={{textAlign: 'center', height: '10px', display: 'flex',alignItems: 'center', justifyContent: 'center'}}>{message} </CAlert>\n  )\n}\n\nexport default NotificationMessage","import { useEffect, useRef } from 'react'\n\nconst useInterval = (callback, delay) => {\n  const savedCallback = useRef(() => {})\n\n  // Remember the latest callback.\n  useEffect(() => {\n    savedCallback.current = callback\n  }, [callback])\n\n  // Set up the interval.\n  useEffect(() => {\n    if (delay) {\n      let id = setInterval(() => savedCallback.current(), delay)\n      return () => clearInterval(id)\n    }\n  }, [delay])\n}\n\nexport default useInterval\n","import React, { useRef, useState } from 'react'\nimport {  Modal } from 'react-bootstrap'\nimport classNames from 'classnames'\nimport './index.scss'\nimport OTPInput from \"react-otp-input\"\nimport {\n  CButton,\n} from '@coreui/react'\nimport useInterval from '../../../hooks/useInterval'\n\n\n\n\nconst OtpModal = ({\n  show,\n  onHide,\n  isError,\n  handleSubmit,\n  isLoading,\n  setOTP,\n  OTP\n}) => {\n\n  const [countDownTimer, setCountDownTimer] = useState(300);\n  const [timer, setTimer] = useState('5 min and 00 sec')\n\n\n  function handleChange(OTP) {\n    setOTP(OTP);\n  }\n\n  useInterval(() => {\n    if (show) \n      setCountDownTimer(countDownTimer === 0\n        ? 0\n        : countDownTimer - 1);\n    let min = Math.floor(countDownTimer / 60);\n    let secs = countDownTimer - min * 60;\n    setTimer(`${min} : ${secs < 10\n      ? '0' + secs\n      : secs}`);\n  }, 1000);\n\n  if ( countDownTimer === 0 && show ) {\n    onHide()\n  }\n\n  return (\n    <Modal\n      show={show}\n      onHide={onHide}\n      dialogClassName=\"otp-modal\"\n      className=\"general-otp-modal\"\n      aria-labelledby=\"contained-modal-title-vcenter\"\n    >\n      <Modal.Body\n        className=\"otp-modal-body\">\n        <form action=\"\" onSubmit={handleSubmit}>\n         \n          <span className=\"otp-title\">Verification code</span>\n          <span className=\"span\">\n            Enter the code that was sent to your phone number\n          </span>\n          <div className=\"otp-fake-field d-flex justify-content-between\">\n            <OTPInput\n              onChange={handleChange}\n              value={OTP}\n              inputStyle=\"otp-inputStyle\"\n              numInputs={6}\n              separator={<span></span>}\n              style={{width: '100%'}}\n              hasErrored\n            />\n          </div>\n          {isError ? <p className={classNames(' text-center text-danger', {'d-block':  true})}> Invalid otp provided</p> : <p></p>}\n          <div className=\"timer-container code-expire-ctn\">\n              <span\n                className=\"otp-text-with-link\"\n                style={{\n                  fontSize: '16px',\n                  color: '#838AA2',\n                  fontFamily: 'sofia-medium',\n                }}\n              >\n                Code will expire in\n                <span\n                  style={\n                    false\n                      ? { color: '#D04750' }\n                      : { color: '#1F65B3' }\n                  }\n                >\n                  {' ' + timer} Minutes\n                </span>\n              </span>\n          </div>\n           <CButton \n              disabled={isLoading || OTP.length < 6}\n              type=\"submit\"\n              style={{width: '100%', backgroundColor: '#015EC6', outline: 'none', padding: '15px 0px'}}>\n              Submit\n            </CButton>\n        </form>\n      </Modal.Body>\n    </Modal>\n  )\n}\n\nexport default OtpModal\n","import React, { useState, useEffect } from \"react\";\nimport {\n  CButton,\n  CCard,\n  CCardBody,\n  CCardGroup,\n  CCol,\n  CContainer,\n  CForm,\n  CFormInput,\n  CInputGroup,\n  CInputGroupText,\n  CRow,\n} from \"@coreui/react\";\nimport CIcon from \"@coreui/icons-react\";\nimport { cilLockLocked,  cilLockUnlocked } from \"@coreui/icons\";\nimport { useNavigate } from \"react-router-dom\";\nimport NotificationMessage from \"src/components/NotificationMessage\";\nimport OtpModal from \"../otp\";\nimport { useRequestNonceQuery } from \"src/api\";\nimport { JSEncrypt } from \"jsencrypt\";\nimport { useLoginMutation, useVerifyOtpMutation } from \"src/api\";\n\nconst Login = () => {\n  const navigate = useNavigate();\n  const [showPassword, setShowPassword] = useState(false);\n\n  const { data, isLoadingNonce, refetch } = useRequestNonceQuery(\"nonce\");\n  const [\n    loginMutation,\n    { data: loginData, isLoading, isError, error, isSuccess },\n  ] = useLoginMutation();\n  const [\n    verifyOtpMutation,\n    {\n      data: otpData,\n      isLoading: otpLoader,\n      isError: otpIsError,\n      isSuccess: otpSuccess,\n    },\n  ] = useVerifyOtpMutation();\n\n  const [user, setUser] = useState({\n    username: \"\",\n    password: \"\",\n  });\n\n  const [otpModal, setOtpModal] = useState(false);\n  const [OTP, setOTP] = useState(\"\");\n\n  const handleSubmit = (e) => {\n    e.preventDefault();\n\n    const encrypt = new JSEncrypt();\n    encrypt.setPublicKey(data?.data[0].nonce);\n\n    let username = encrypt.encrypt(user.username);\n    let password = encrypt.encrypt(user.password);\n\n    const encryptedPayload = {\n      req: `${username}::::${password}::::${data?.data[0].nonce}`,\n    };\n    loginMutation(encryptedPayload);\n  };\n\n  useEffect(() => {\n    if (isSuccess) {\n      setOtpModal(!otpModal);\n    }\n    if (isError) {\n      refetch();\n    }\n  }, [isSuccess, isError]);\n\n  useEffect(() => {\n    if (otpSuccess) {\n      setOtpModal(false);\n      navigate(\"/dashboard\");\n      sessionStorage.setItem(\"token\", otpData.data[0]?.token);\n    }\n  }, [otpSuccess]);\n\n  const handleSubmitOtp = (event) => {\n    event.preventDefault();\n    verifyOtpMutation({ otpId: loginData?.data[0]?.otpId, otp: OTP });\n  };\n\n  return (\n    <div className=\"min-vh-100 d-flex flex-row align-items-center login-container\">\n      <CContainer>\n        <CRow\n          className=\"justify-content-center\"\n          style={{ marginBottom: \"60px\" }}\n        >\n          <CCol md={5}>\n            {isError && (\n              <NotificationMessage\n                message={error.data?.data[0]?.uiMessage}\n                type=\"danger\"\n              />\n            )}\n            <CCardGroup>\n              <CCard className=\"p-4\">\n                <CCardBody>\n                  <CForm onSubmit={handleSubmit}>\n                    <h1 style={{ textAlign: \"center\" }}>Compliance System</h1>\n                    <p\n                      className=\"text-medium-emphasis\"\n                      style={{ textAlign: \"center\" }}\n                    >\n                      Sign In to your account\n                    </p>\n                    <CInputGroup className=\"mb-3\">\n                      <CFormInput\n                        placeholder=\"Username\"\n                        autoComplete=\"username\"\n                        onChange={(e) =>\n                          setUser({\n                            ...user,\n                            username: e.target.value,\n                          })\n                        }\n                        required\n                      />\n                    </CInputGroup>\n                    <CInputGroup className=\"mb-4\">\n                      <CFormInput\n                        type={showPassword ? \"text\" : \"password\"}\n                        placeholder=\"Password\"\n                        autoComplete=\"current-password\"\n                        onChange={(e) =>\n                          setUser({\n                            ...user,\n                            password: e.target.value,\n                          })\n                        }\n                        required\n                      />\n                      <CInputGroupText\n                        onClick={() => setShowPassword(!showPassword)}\n                        style={{ cursor: \"pointer\" }}\n                      >\n                        <CIcon\n                          icon={showPassword ? cilLockLocked : cilLockUnlocked}\n                        />\n                      </CInputGroupText>\n                    </CInputGroup>\n                    <div style={{ width: \"100%\" }}>\n                      <CButton\n                        disabled={isLoadingNonce || isLoading}\n                        type=\"submit\"\n                        style={{\n                          width: \"100%\",\n                          backgroundColor: \"#015EC6\",\n                          outline: \"none\",\n                        }}\n                      >\n                        Login\n                      </CButton>\n                    </div>\n                    <div\n                      style={{\n                        width: \"100%\",\n                        display: \"flex\",\n                        justifyContent: \"center\",\n                      }}\n                    >\n                      <span\n                        style={{ cursor: \"pointer\" }}\n                        // onClick={() => navigate(\"/recover-password\")}\n                        color=\"link\"\n                        className=\"forgot-password-link\"\n                      >\n                        \n                      </span>\n                    </div>\n                  </CForm>\n                </CCardBody>\n              </CCard>\n            </CCardGroup>\n          </CCol>\n        </CRow>\n        <OtpModal\n          show={otpModal}\n          onHide={() => setOtpModal(false)}\n          // otpId={loginData?.data[0]?.otpId}\n          handleSubmit={handleSubmitOtp}\n          isError={otpIsError}\n          isLoading={otpLoader}\n          OTP={OTP}\n          setOTP={setOTP}\n        />\n      </CContainer>\n    </div>\n  );\n};\n\nexport default Login;\n"],"names":["_ref","message","type","useEffect","window","scrollTo","top","behavior","_jsxs","CAlert","color","style","textAlign","height","display","alignItems","justifyContent","children","callback","delay","savedCallback","useRef","current","id","setInterval","clearInterval","show","onHide","isError","handleSubmit","isLoading","setOTP","OTP","_useState","useState","_useState2","_slicedToArray","countDownTimer","setCountDownTimer","_useState3","_useState4","timer","setTimer","useInterval","min","Math","floor","secs","concat","_jsx","Modal","dialogClassName","className","Body","action","onSubmit","OTPInput","onChange","value","inputStyle","numInputs","separator","width","hasErrored","classNames","fontSize","fontFamily","CButton","disabled","length","backgroundColor","outline","padding","_error$data","_error$data$data$","navigate","useNavigate","showPassword","setShowPassword","_useRequestNonceQuery","useRequestNonceQuery","data","isLoadingNonce","refetch","_useLoginMutation","useLoginMutation","_useLoginMutation2","loginMutation","_useLoginMutation2$","loginData","error","isSuccess","_useVerifyOtpMutation","useVerifyOtpMutation","_useVerifyOtpMutation2","verifyOtpMutation","_useVerifyOtpMutation3","otpData","otpLoader","otpIsError","otpSuccess","username","password","user","setUser","_useState5","_useState6","otpModal","setOtpModal","_useState7","_useState8","_otpData$data$","sessionStorage","setItem","token","CContainer","CRow","marginBottom","CCol","md","NotificationMessage","uiMessage","CCardGroup","CCard","CCardBody","CForm","e","preventDefault","encrypt","JSEncrypt","setPublicKey","nonce","encryptedPayload","req","CInputGroup","CFormInput","placeholder","autoComplete","_objectSpread","target","required","CInputGroupText","onClick","cursor","CIcon","icon","cilLockLocked","cilLockUnlocked","OtpModal","event","_loginData$data$","otpId","otp"],"sourceRoot":""}